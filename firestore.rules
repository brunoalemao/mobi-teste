rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'adm@gmail.com';
    }

    function isDriver() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }

    function isPassenger() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'passenger';
    }

    function isApprovedDriver() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/drivers/$(request.auth.uid)).data.status == 'approved';
    }

    // Regras para a coleção de usuários
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Usuário pode atualizar seu próprio documento
        userId == request.auth.uid || 
        // Admin pode atualizar qualquer documento
        isAdmin()
      ) && (
        // Se for uma atualização de localização, permitir apenas os campos específicos
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentLocation', 'lastLocationUpdate']) ||
        // Se não for atualização de localização, permitir atualização completa
        true
      );
      allow delete: if isAdmin();
    }

    // Regras para a coleção de motoristas
    match /drivers/{driverId} {
      allow read: if true;
      allow create: if isAuthenticated() && driverId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Motorista pode atualizar seu próprio documento
        driverId == request.auth.uid || 
        // Passageiro pode atualizar apenas rating e totalRatings
        (isPassenger() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['rating', 'totalRatings'])) ||
        // Admin pode atualizar tudo
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para corridas ativas
    match /activeRides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isPassenger();
      allow update: if isAuthenticated() && (
        // Motorista aprovado pode atualizar corridas disponíveis ou suas próprias
        (isApprovedDriver() && (
          resource.data.driverId == null || 
          resource.data.driverId == request.auth.uid
        )) ||
        // Passageiro pode atualizar suas próprias corridas
        (isPassenger() && resource.data.userId == request.auth.uid) ||
        // Admin pode atualizar qualquer corrida
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para corridas completadas
    match /completedRides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isApprovedDriver() || isPassenger() || isAdmin()
      );
      allow update: if isAuthenticated() && (
        // Permitir que o passageiro atualize para adicionar avaliação
        (resource.data.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['rating', 'ratingComment', 'ratedAt'])) ||
        // Permitir que o motorista atualize para adicionar avaliação
        (resource.data.driverId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['driverRating', 'driverComment', 'driverRatedAt'])) ||
        isAdmin()
      );
      allow delete: if false; // Não permitir deleção de corridas completadas
    }

    // Regras para corridas canceladas
    match /cancelledRides/{rideId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isApprovedDriver() || isPassenger() || isAdmin()
      );
      allow update: if isAdmin();
      allow delete: if false; // Não permitir deleção de corridas canceladas
    }

    // Regras para corridas antigas (legado)
    match /rides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.driverId == request.auth.uid ||
        isDriver() ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }

    // Regras para veículos dos motoristas
    match /driverVehicles/{vehicleId} {
      allow read: if true;
      allow create: if isAuthenticated() && vehicleId == request.auth.uid;
      allow update: if isAuthenticated() && (
        vehicleId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para avaliações
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para categorias de veículos
    match /vehicleCategories/{categoryId} {
      allow read: if true; // Qualquer pessoa pode ver as categorias
      allow create, update, delete: if isAdmin(); // Apenas admin pode gerenciar
    }

    // Regras para destinos rápidos
    match /quickDestinations/{destinationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'origin', 'destination', 'userId', 'createdAt', 'icon']) &&
        request.resource.data.origin.keys().hasAll(['place', 'address', 'coordinates']) &&
        request.resource.data.destination.keys().hasAll(['place', 'address', 'coordinates']);
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Regras para configurações do sistema
    match /systemSettings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Regras para logs do sistema
    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Regras para notificações
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para configurações de preços dinâmicos
    match /dynamicPricing/{configId} {
      allow read: if true; // Qualquer pessoa pode ver as configurações
      allow write: if isAdmin(); // Apenas admin pode modificar
    }

    // Regra padrão para qualquer outra coleção
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 